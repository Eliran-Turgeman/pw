name: Release

on:
  push:
    branches:
      - main

permissions:
  contents: read

jobs:
  github-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Prepare Release
        id: prepare_release
        run: |
          # grab latest release and tag to compare and decide to create a new one
          create_release=true
          latest_gh_release=$(curl -s "https://api.github.com/repos/${{ github.repository }}/releases/latest"  | grep -Po '"tag_name": "\K.*?(?=")')
          latest_tag=$(git describe --abbrev=0 --tags)

          if [ "$latest_gh_release" = "$latest_tag" ]
          then
            create_release=false
          fi

          echo "create_release=$create_release" >> "$GITHUB_OUTPUT"
          echo "latest_release_version=$latest_gh_release" >> "$GITHUB_OUTPUT"
          echo "version=$latest_tag" >> "$GITHUB_OUTPUT"
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        id: create_github_release
        with:
          tag_name: ${{ steps.prepare_release.outputs.version }}
          name: ${{ steps.prepare_release.outputs.version }}
    outputs:
      upload_url: ${{ steps.create_github_release.outputs.upload_url }}
      version: ${{ steps.prepare_release.outputs.version }}
  build-release-artifacts:
    strategy:
      matrix:
        include:
          # - os: macos-latest
          #   name: darwin
          #   suffix: ''
          #   target: x86_64-apple-darwin
          # - os: ubuntu-latest
          #   name: linux
          #   suffix: ''
          #   target: x86_64-unknown-linux-gnu
          - os: windows-latest
            name: windows
            suffix: '.exe'
            target: x86_64-pc-windows-msvc
    needs: [github-release]
    if: needs.github-release.outputs.upload_url != ''
    runs-on: ${{ matrix.os }}
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v2
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true
      - name: Build
        run: cargo build --release --target ${{ matrix.target }}
      - name: Windows - zip artifact
        if: matrix.os == 'windows-latest'
        run: Compress-Archive -Path target\\release\\pw.exe -DestinationPath pw.zip
      - name: Linux/Mac - zip artifact
        if: matrix.os != 'windows-latest'
        run: zip pw.zip target/release/pw
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.MY_PAT }}
        with:
          upload_url: ${{ needs.github-release.outputs.upload_url }}
          asset_path: pw.zip
          asset_name: pw_${{ matrix.name }}_X86_64_${{ needs.github-release.outputs.version }}.zip
          asset_content_type: application/zip
